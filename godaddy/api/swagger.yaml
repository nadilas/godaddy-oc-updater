---
swagger: "2.0"
host: "api.ote-godaddy.com"
tags:
- name: "v1"
  description: ""
paths:
  /v1/domains:
    get:
      tags:
      - "v1"
      summary: "Retrieve a list of Domains for the specified Shopper"
      operationId: "list"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID whose domains are to be retrieved"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "statuses"
        in: "query"
        description: "Only include results with `status` value in the specified set"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ACTIVE"
          - "AWAITING_CLAIM_ACK"
          - "AWAITING_DOCUMENT_AFTER_TRANSFER"
          - "AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT"
          - "AWAITING_DOCUMENT_UPLOAD"
          - "AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY"
          - "AWAITING_PAYMENT"
          - "AWAITING_RENEWAL_TRANSFER_IN_COMPLETE"
          - "AWAITING_TRANSFER_IN_ACK"
          - "AWAITING_TRANSFER_IN_AUTH"
          - "AWAITING_TRANSFER_IN_AUTO"
          - "AWAITING_TRANSFER_IN_WHOIS"
          - "AWAITING_TRANSFER_IN_WHOIS_FIX"
          - "AWAITING_VERIFICATION_ICANN"
          - "AWAITING_VERIFICATION_ICANN_MANUAL"
          - "CANCELLED"
          - "CANCELLED_HELD"
          - "CANCELLED_REDEEMABLE"
          - "CANCELLED_TRANSFER"
          - "CONFISCATED"
          - "DISABLED_SPECIAL"
          - "EXCLUDED_INVALID_CLAIM_FIREHOSE"
          - "EXPIRED_REASSIGNED"
          - "FAILED_BACKORDER_CAPTURE"
          - "FAILED_DROP_IMMEDIATE_THEN_ADD"
          - "FAILED_PRE_REGISTRATION"
          - "FAILED_REDEMPTION"
          - "FAILED_REDEMPTION_REPORT"
          - "FAILED_REGISTRATION"
          - "FAILED_REGISTRATION_FIREHOSE"
          - "FAILED_RESTORATION_REDEMPTION_MOCK"
          - "FAILED_SETUP"
          - "FAILED_TRANSFER_IN"
          - "FAILED_TRANSFER_IN_BAD_STATUS"
          - "FAILED_TRANSFER_IN_REGISTRY"
          - "HELD_COURT_ORDERED"
          - "HELD_DISPUTED"
          - "HELD_EXPIRATION_PROTECTION"
          - "HELD_EXPIRED_REDEMPTION_MOCK"
          - "HELD_REGISTRAR_ADD"
          - "HELD_REGISTRAR_REMOVE"
          - "HELD_SHOPPER"
          - "HELD_TEMPORARY"
          - "LOCKED_ABUSE"
          - "LOCKED_COPYRIGHT"
          - "LOCKED_REGISTRY"
          - "LOCKED_SUPER"
          - "PARKED_AND_HELD"
          - "PARKED_EXPIRED"
          - "PARKED_VERIFICATION_ICANN"
          - "PENDING_ABORT_CANCEL_SETUP"
          - "PENDING_AGREEMENT_PRE_REGISTRATION"
          - "PENDING_APPLY_RENEWAL_CREDITS"
          - "PENDING_BACKORDER_CAPTURE"
          - "PENDING_BLOCKED_REGISTRY"
          - "PENDING_CANCEL_REGISTRANT_PROFILE"
          - "PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT"
          - "PENDING_COMPLETE_REGISTRANT_PROFILE"
          - "PENDING_COO"
          - "PENDING_COO_COMPLETE"
          - "PENDING_DNS"
          - "PENDING_DNS_ACTIVE"
          - "PENDING_DNS_INACTIVE"
          - "PENDING_DOCUMENT_VALIDATION"
          - "PENDING_DOCUMENT_VERIFICATION"
          - "PENDING_DROP_IMMEDIATE"
          - "PENDING_DROP_IMMEDIATE_THEN_ADD"
          - "PENDING_EPP_CREATE"
          - "PENDING_EPP_DELETE"
          - "PENDING_EPP_UPDATE"
          - "PENDING_ESCALATION_REGISTRY"
          - "PENDING_EXPIRATION"
          - "PENDING_EXPIRATION_RESPONSE"
          - "PENDING_EXPIRATION_SYNC"
          - "PENDING_EXPIRED_REASSIGNMENT"
          - "PENDING_EXPIRE_AUTO_ADD"
          - "PENDING_EXTEND_REGISTRANT_PROFILE"
          - "PENDING_FAILED_COO"
          - "PENDING_FAILED_EPP_CREATE"
          - "PENDING_FAILED_HELD"
          - "PENDING_FAILED_PURCHASE_PREMIUM"
          - "PENDING_FAILED_RECONCILE_FIREHOSE"
          - "PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT"
          - "PENDING_FAILED_RELEASE_PREMIUM"
          - "PENDING_FAILED_RENEW_EXPIRATION_PROTECTION"
          - "PENDING_FAILED_RESERVE_PREMIUM"
          - "PENDING_FAILED_SUBMIT_FIREHOSE"
          - "PENDING_FAILED_TRANSFER_ACK_PREMIUM"
          - "PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM"
          - "PENDING_FAILED_TRANSFER_IN_PREMIUM"
          - "PENDING_FAILED_TRANSFER_PREMIUM"
          - "PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM"
          - "PENDING_FAILED_UNLOCK_PREMIUM"
          - "PENDING_FAILED_UPDATE_API"
          - "PENDING_FRAUD_VERIFICATION"
          - "PENDING_FRAUD_VERIFIED"
          - "PENDING_GET_CONTACTS"
          - "PENDING_GET_HOSTS"
          - "PENDING_GET_NAME_SERVERS"
          - "PENDING_GET_STATUS"
          - "PENDING_HOLD_ESCROW"
          - "PENDING_HOLD_REDEMPTION"
          - "PENDING_LOCK_CLIENT_REMOVE"
          - "PENDING_LOCK_DATA_QUALITY"
          - "PENDING_LOCK_THEN_HOLD_REDEMPTION"
          - "PENDING_PARKING_DETERMINATION"
          - "PENDING_PARK_INVALID_WHOIS"
          - "PENDING_PARK_INVALID_WHOIS_REMOVAL"
          - "PENDING_PURCHASE_PREMIUM"
          - "PENDING_RECONCILE"
          - "PENDING_RECONCILE_FIREHOSE"
          - "PENDING_REDEMPTION"
          - "PENDING_REDEMPTION_REPORT"
          - "PENDING_REDEMPTION_REPORT_COMPLETE"
          - "PENDING_REDEMPTION_REPORT_SUBMITTED"
          - "PENDING_REDEMPTION_WITHOUT_RECEIPT"
          - "PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK"
          - "PENDING_RELEASE_PREMIUM"
          - "PENDING_REMOVAL"
          - "PENDING_REMOVAL_HELD"
          - "PENDING_REMOVAL_PARKED"
          - "PENDING_REMOVAL_UNPARK"
          - "PENDING_RENEWAL"
          - "PENDING_RENEW_EXPIRATION_PROTECTION"
          - "PENDING_RENEW_INFINITE"
          - "PENDING_RENEW_LOCKED"
          - "PENDING_RENEW_WITHOUT_RECEIPT"
          - "PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT"
          - "PENDING_RESERVE_PREMIUM"
          - "PENDING_RESET_VERIFICATION_ICANN"
          - "PENDING_RESPONSE_FIREHOSE"
          - "PENDING_RESTORATION"
          - "PENDING_RESTORATION_INACTIVE"
          - "PENDING_RESTORATION_REDEMPTION_MOCK"
          - "PENDING_RETRY_EPP_CREATE"
          - "PENDING_RETRY_HELD"
          - "PENDING_SEND_AUTH_CODE"
          - "PENDING_SETUP"
          - "PENDING_SETUP_ABANDON"
          - "PENDING_SETUP_AGREEMENT_LANDRUSH"
          - "PENDING_SETUP_AGREEMENT_SUNRISE2_A"
          - "PENDING_SETUP_AGREEMENT_SUNRISE2_B"
          - "PENDING_SETUP_AGREEMENT_SUNRISE2_C"
          - "PENDING_SETUP_AUTH"
          - "PENDING_SETUP_DNS"
          - "PENDING_SETUP_FAILED"
          - "PENDING_SETUP_REVIEW"
          - "PENDING_SETUP_SUNRISE"
          - "PENDING_SETUP_SUNRISE_PRE"
          - "PENDING_SETUP_SUNRISE_RESPONSE"
          - "PENDING_SUBMIT_FAILURE"
          - "PENDING_SUBMIT_FIREHOSE"
          - "PENDING_SUBMIT_HOLD_FIREHOSE"
          - "PENDING_SUBMIT_HOLD_LANDRUSH"
          - "PENDING_SUBMIT_HOLD_SUNRISE"
          - "PENDING_SUBMIT_LANDRUSH"
          - "PENDING_SUBMIT_RESPONSE_FIREHOSE"
          - "PENDING_SUBMIT_RESPONSE_LANDRUSH"
          - "PENDING_SUBMIT_RESPONSE_SUNRISE"
          - "PENDING_SUBMIT_SUCCESS_FIREHOSE"
          - "PENDING_SUBMIT_SUCCESS_LANDRUSH"
          - "PENDING_SUBMIT_SUCCESS_SUNRISE"
          - "PENDING_SUBMIT_SUNRISE"
          - "PENDING_SUBMIT_WAITING_LANDRUSH"
          - "PENDING_SUCCESS_PRE_REGISTRATION"
          - "PENDING_SUSPENDED_DATA_QUALITY"
          - "PENDING_TRANSFER_ACK_PREMIUM"
          - "PENDING_TRANSFER_IN"
          - "PENDING_TRANSFER_IN_ACK"
          - "PENDING_TRANSFER_IN_ACK_PREMIUM"
          - "PENDING_TRANSFER_IN_BAD_REGISTRANT"
          - "PENDING_TRANSFER_IN_CANCEL"
          - "PENDING_TRANSFER_IN_CANCEL_REGISTRY"
          - "PENDING_TRANSFER_IN_COMPLETE_ACK"
          - "PENDING_TRANSFER_IN_DELETE"
          - "PENDING_TRANSFER_IN_LOCK"
          - "PENDING_TRANSFER_IN_NACK"
          - "PENDING_TRANSFER_IN_NOTIFICATION"
          - "PENDING_TRANSFER_IN_PREMIUM"
          - "PENDING_TRANSFER_IN_RELEASE"
          - "PENDING_TRANSFER_IN_RESPONSE"
          - "PENDING_TRANSFER_IN_UNDERAGE"
          - "PENDING_TRANSFER_OUT"
          - "PENDING_TRANSFER_OUT_ACK"
          - "PENDING_TRANSFER_OUT_NACK"
          - "PENDING_TRANSFER_OUT_PREMIUM"
          - "PENDING_TRANSFER_OUT_UNDERAGE"
          - "PENDING_TRANSFER_OUT_VALIDATION"
          - "PENDING_TRANSFER_PREMIUM"
          - "PENDING_TRANSFER_PREMUIM"
          - "PENDING_TRANSFER_SUBMIT_PREMIUM"
          - "PENDING_UNLOCK_DATA_QUALITY"
          - "PENDING_UNLOCK_PREMIUM"
          - "PENDING_UPDATE"
          - "PENDING_UPDATED_REGISTRANT_DATA_QUALITY"
          - "PENDING_UPDATE_ACCOUNT"
          - "PENDING_UPDATE_API"
          - "PENDING_UPDATE_API_RESPONSE"
          - "PENDING_UPDATE_AUTH"
          - "PENDING_UPDATE_CONTACTS"
          - "PENDING_UPDATE_CONTACTS_PRIVACY"
          - "PENDING_UPDATE_DNS"
          - "PENDING_UPDATE_DNS_SECURITY"
          - "PENDING_UPDATE_ELIGIBILITY"
          - "PENDING_UPDATE_EPP_CONTACTS"
          - "PENDING_UPDATE_MEMBERSHIP"
          - "PENDING_UPDATE_OWNERSHIP"
          - "PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION"
          - "PENDING_UPDATE_OWNERSHIP_HELD"
          - "PENDING_UPDATE_REGISTRANT"
          - "PENDING_UPDATE_REPO"
          - "PENDING_VALIDATION_DATA_QUALITY"
          - "PENDING_VERIFICATION_FRAUD"
          - "PENDING_VERIFICATION_STATUS"
          - "PENDING_VERIFY_REGISTRANT_DATA_QUALITY"
          - "RESERVED"
          - "RESERVED_PREMIUM"
          - "REVERTED"
          - "SUSPENDED_VERIFICATION_ICANN"
          - "TRANSFERRED_OUT"
          - "UNLOCKED_ABUSE"
          - "UNLOCKED_SUPER"
          - "UNPARKED_AND_UNHELD"
          - "UPDATED_OWNERSHIP"
          - "UPDATED_OWNERSHIP_HELD"
        x-exportParamName: "Statuses"
      - name: "statusGroups"
        in: "query"
        description: "Only include results with `status` value in any of the specified\
          \ groups"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "INACTIVE"
          - "PRE_REGISTRATION"
          - "REDEMPTION"
          - "RENEWABLE"
          - "VERIFICATION_ICANN"
          - "VISIBLE"
        x-exportParamName: "StatusGroups"
      - name: "limit"
        in: "query"
        description: "Maximum number of domains to return"
        required: false
        type: "integer"
        maximum: 1000
        minimum: 1
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "marker"
        in: "query"
        description: "Marker Domain to use as the offset in results"
        required: false
        type: "string"
        x-exportParamName: "Marker"
        x-optionalDataType: "String"
      - name: "includes"
        in: "query"
        description: "Optional details to be included in the response"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "authCode"
          - "contacts"
          - "nameServers"
        x-exportParamName: "Includes"
      - name: "modifiedDate"
        in: "query"
        description: "Only include results that have been modified since the specified\
          \ date"
        required: false
        type: "string"
        format: "iso-datetime"
        x-exportParamName: "ModifiedDate"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DomainSummary"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Limit must have a value no greater than 1000"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/agreements:
    get:
      tags:
      - "v1"
      summary: "Retrieve the legal agreement(s) required to purchase the specified\
        \ TLD and add-ons"
      operationId: "getAgreement"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Market-Id"
        in: "header"
        description: "Unique identifier of the Market used to retrieve/translate Legal\
          \ Agreements"
        required: false
        type: "string"
        default: "en-US"
        format: "bcp-47"
        x-exportParamName: "XMarketId"
        x-optionalDataType: "String"
      - name: "tlds"
        in: "query"
        description: "list of TLDs whose legal agreements are to be retrieved"
        required: true
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Tlds"
      - name: "privacy"
        in: "query"
        description: "Whether or not privacy has been requested"
        required: true
        type: "boolean"
        x-exportParamName: "Privacy"
      - name: "forTransfer"
        in: "query"
        description: "Whether or not domain tranfer has been requested"
        required: false
        type: "boolean"
        x-exportParamName: "ForTransfer"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LegalAgreement"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/available:
    get:
      tags:
      - "v1"
      summary: "Determine whether or not the specified domain is available for purchase"
      operationId: "available"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "domain"
        in: "query"
        description: "Domain name whose availability is to be checked"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "checkType"
        in: "query"
        description: "Optimize for time ('FAST') or accuracy ('FULL')"
        required: false
        type: "string"
        default: "FAST"
        enum:
        - "FAST"
        - "FULL"
        - "fast"
        - "full"
        x-exportParamName: "CheckType"
        x-optionalDataType: "String"
      - name: "forTransfer"
        in: "query"
        description: "Whether or not to include domains available for transfer. If\
          \ set to True, checkType is ignored"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForTransfer"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainAvailableResponse"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Cannot convert domain label error<br>Domain is missing IDN\
            \ script<br>Domain segment ends with dash<br>Domain starts with dashbr>Domain\
            \ uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid\
            \ character(s) error<br>Invalid tld error<br>Non-IDN domain name must\
            \ not have dashes at the third and fourth position<br>Reserved name error<br>domain\
            \ must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "v1"
      summary: "Determine whether or not the specified domains are available for purchase"
      operationId: "availableBulk"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - in: "body"
        name: "domains"
        description: "Domain names for which to check availability"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        x-exportParamName: "Domains"
      - name: "checkType"
        in: "query"
        description: "Optimize for time ('FAST') or accuracy ('FULL')"
        required: false
        type: "string"
        default: "FAST"
        enum:
        - "FAST"
        - "FULL"
        - "fast"
        - "full"
        x-exportParamName: "CheckType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainAvailableBulk"
        203:
          description: "Request was partially successful"
          schema:
            $ref: "#/definitions/DomainAvailableBulkMixed"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Cannot convert domain label error<br>Domain is missing IDN\
            \ script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain\
            \ uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid\
            \ character(s) error<br>Invalid tld error<br>Non-IDN domain name must\
            \ not have dashes at the third and fourth position<br>Reserved name error<br>Reserved\
            \ name error<br>domain must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/contacts/validate:
    post:
      tags:
      - "v1"
      summary: "Validate the request body using the Domain Contact Validation Schema\
        \ for specified domains."
      description: "All contacts specified in request will be validated against all\
        \ domains specifed in \"domains\". As an alternative, you can also pass in\
        \ tlds, with the exception of `uk`, which requires full domain names"
      operationId: "ContactsValidate"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Private-Label-Id"
        in: "header"
        description: "PrivateLabelId to operate as, if different from JWT"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "XPrivateLabelId"
        x-optionalDataType: "Int32"
      - name: "marketId"
        in: "query"
        description: "MarketId in which the request is being made, and for which responses\
          \ should be localized"
        required: false
        type: "string"
        default: "en-US"
        format: "bcp-47"
        x-exportParamName: "MarketId"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "An instance document expected for domains contacts validation"
        required: true
        schema:
          $ref: "#/definitions/DomainsContactsBulk"
        x-exportParamName: "Body"
      responses:
        200:
          description: "No response was specified"
        204:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Request body doesn't fulfill schema, see details in `fields`"
          schema:
            $ref: "#/definitions/ErrorDomainContactsValidate"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/purchase:
    post:
      tags:
      - "v1"
      summary: "Purchase and register the specified Domain"
      operationId: "purchase"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "The Shopper for whom the domain should be purchased"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "An instance document expected to match the JSON schema returned\
          \ by `./schema/{tld}`"
        required: true
        schema:
          $ref: "#/definitions/DomainPurchase"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainPurchaseResponse"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "domain must be specified<br>Based on restrictions declared\
            \ in JSON schema returned by `./schema/{tld}`<br>Cannot convert domain\
            \ label error<br>Domain is missing IDN script<br>Domain segment ends with\
            \ dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>FQDN\
            \ fails generic validity regex<br>Invalid character(s) error<br>Invalid\
            \ tld error<br>Non-IDN domain name must not have dashes at the third and\
            \ fourth position<br>Reserved name error<br>`body` must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/purchase/schema/{tld}:
    get:
      tags:
      - "v1"
      summary: "Retrieve the schema to be submitted when registering a Domain for\
        \ the specified TLD"
      operationId: "schema"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "tld"
        in: "path"
        description: "The Top-Level Domain whose schema should be retrieved"
        required: true
        type: "string"
        x-exportParamName: "Tld"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/JsonSchema"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`tld` must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/purchase/validate:
    post:
      tags:
      - "v1"
      summary: "Validate the request body using the Domain Purchase Schema for the\
        \ specified TLD"
      operationId: "validate"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "An instance document expected to match the JSON schema returned\
          \ by `./schema/{tld}`"
        required: true
        schema:
          $ref: "#/definitions/DomainPurchase"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Based on restrictions declared in JSON schema returned by\
            \ `./schema/{tld}`"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/suggest:
    get:
      tags:
      - "v1"
      summary: "Suggest alternate Domain names based on a seed Domain, a set of keywords,\
        \ or the shopper's purchase history"
      operationId: "suggest"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID for which the suggestions are being generated"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Domain name or set of keywords for which alternative domain\
          \ names will be suggested"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "country"
        in: "query"
        description: "Two-letter ISO country code to be used as a hint for target\
          \ region<br/><br/>\nNOTE: These are sample values, there are many\n<a href=\"\
          http://www.iso.org/iso/country_codes.htm\">more</a>"
        required: false
        type: "string"
        format: "iso-country-code"
        enum:
        - "AC"
        - "AD"
        - "AE"
        - "AF"
        - "AG"
        - "AI"
        - "AL"
        - "AM"
        - "AO"
        - "AQ"
        - "AR"
        - "AS"
        - "AT"
        - "AU"
        - "AW"
        - "AX"
        - "AZ"
        - "BA"
        - "BB"
        - "BD"
        - "BE"
        - "BF"
        - "BG"
        - "BH"
        - "BI"
        - "BJ"
        - "BM"
        - "BN"
        - "BO"
        - "BQ"
        - "BR"
        - "BS"
        - "BT"
        - "BV"
        - "BW"
        - "BY"
        - "BZ"
        - "CA"
        - "CC"
        - "CD"
        - "CF"
        - "CG"
        - "CH"
        - "CI"
        - "CK"
        - "CL"
        - "CM"
        - "CN"
        - "CO"
        - "CR"
        - "CV"
        - "CW"
        - "CX"
        - "CY"
        - "CZ"
        - "DE"
        - "DJ"
        - "DK"
        - "DM"
        - "DO"
        - "DZ"
        - "EC"
        - "EE"
        - "EG"
        - "EH"
        - "ER"
        - "ES"
        - "ET"
        - "FI"
        - "FJ"
        - "FK"
        - "FM"
        - "FO"
        - "FR"
        - "GA"
        - "GB"
        - "GD"
        - "GE"
        - "GF"
        - "GG"
        - "GH"
        - "GI"
        - "GL"
        - "GM"
        - "GN"
        - "GP"
        - "GQ"
        - "GR"
        - "GS"
        - "GT"
        - "GU"
        - "GW"
        - "GY"
        - "HK"
        - "HM"
        - "HN"
        - "HR"
        - "HT"
        - "HU"
        - "ID"
        - "IE"
        - "IL"
        - "IM"
        - "IN"
        - "IO"
        - "IQ"
        - "IS"
        - "IT"
        - "JE"
        - "JM"
        - "JO"
        - "JP"
        - "KE"
        - "KG"
        - "KH"
        - "KI"
        - "KM"
        - "KN"
        - "KR"
        - "KV"
        - "KW"
        - "KY"
        - "KZ"
        - "LA"
        - "LB"
        - "LC"
        - "LI"
        - "LK"
        - "LR"
        - "LS"
        - "LT"
        - "LU"
        - "LV"
        - "LY"
        - "MA"
        - "MC"
        - "MD"
        - "ME"
        - "MG"
        - "MH"
        - "MK"
        - "ML"
        - "MM"
        - "MN"
        - "MO"
        - "MP"
        - "MQ"
        - "MR"
        - "MS"
        - "MT"
        - "MU"
        - "MV"
        - "MW"
        - "MX"
        - "MY"
        - "MZ"
        - "NA"
        - "NC"
        - "NE"
        - "NF"
        - "NG"
        - "NI"
        - "NL"
        - "NO"
        - "NP"
        - "NR"
        - "NU"
        - "NZ"
        - "OM"
        - "PA"
        - "PE"
        - "PF"
        - "PG"
        - "PH"
        - "PK"
        - "PL"
        - "PM"
        - "PN"
        - "PR"
        - "PS"
        - "PT"
        - "PW"
        - "PY"
        - "QA"
        - "RE"
        - "RO"
        - "RS"
        - "RU"
        - "RW"
        - "SA"
        - "SB"
        - "SC"
        - "SE"
        - "SG"
        - "SH"
        - "SI"
        - "SJ"
        - "SK"
        - "SL"
        - "SM"
        - "SN"
        - "SO"
        - "SR"
        - "ST"
        - "SV"
        - "SX"
        - "SZ"
        - "TC"
        - "TD"
        - "TF"
        - "TG"
        - "TH"
        - "TJ"
        - "TK"
        - "TL"
        - "TM"
        - "TN"
        - "TO"
        - "TP"
        - "TR"
        - "TT"
        - "TV"
        - "TW"
        - "TZ"
        - "UA"
        - "UG"
        - "UM"
        - "US"
        - "UY"
        - "UZ"
        - "VA"
        - "VC"
        - "VE"
        - "VG"
        - "VI"
        - "VN"
        - "VU"
        - "WF"
        - "WS"
        - "YE"
        - "YT"
        - "ZA"
        - "ZM"
        - "ZW"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      - name: "city"
        in: "query"
        description: "Name of city to be used as a hint for target region"
        required: false
        type: "string"
        format: "city-name"
        x-exportParamName: "City"
        x-optionalDataType: "String"
      - name: "sources"
        in: "query"
        description: "Sources to be queried<br/><br/><ul>\n<li><strong>CC_TLD</strong>\
          \ - Varies the TLD using Country Codes</li>\n<li><strong>EXTENSION</strong>\
          \ - Varies the TLD</li>\n<li><strong>KEYWORD_SPIN</strong> - Identifies\
          \ keywords and then rotates each one</li>\n<li><strong>PREMIUM</strong>\
          \ - Includes variations with premium prices</li></ul>"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "CC_TLD"
          - "EXTENSION"
          - "KEYWORD_SPIN"
          - "PREMIUM"
          - "cctld"
          - "extension"
          - "keywordspin"
          - "premium"
        x-exportParamName: "Sources"
      - name: "tlds"
        in: "query"
        description: "Top-level domains to be included in suggestions<br/><br/>\n\
          NOTE: These are sample values, there are many\n<a href=\"http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\"\
          >more</a>"
        required: false
        type: "array"
        items:
          type: "string"
        x-exportParamName: "Tlds"
      - name: "lengthMax"
        in: "query"
        description: "Maximum length of second-level domain"
        required: false
        type: "integer"
        x-exportParamName: "LengthMax"
        x-optionalDataType: "Int32"
      - name: "lengthMin"
        in: "query"
        description: "Minimum length of second-level domain"
        required: false
        type: "integer"
        x-exportParamName: "LengthMin"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Maximum number of suggestions to return"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "waitMs"
        in: "query"
        description: "Maximum amount of time, in milliseconds, to wait for responses\n\
          If elapses, return the results compiled up to that point"
        required: false
        type: "integer"
        default: 1000
        format: "integer-positive"
        x-exportParamName: "WaitMs"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DomainSuggestion"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`query` must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/tlds:
    get:
      tags:
      - "v1"
      summary: "Retrieves a list of TLDs supported and enabled for sale"
      operationId: "tlds"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters: []
      responses:
        200:
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TldSummary"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}:
    get:
      tags:
      - "v1"
      summary: "Retrieve details for the specified Domain"
      operationId: "get"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID expected to own the specified domain"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain name whose details are to be retrieved"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainDetail"
        203:
          description: "Request was partially successful, see verifications.status\
            \ for further detail"
          schema:
            $ref: "#/definitions/DomainDetail"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`domain` must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "v1"
      summary: "Cancel a purchased domain"
      operationId: "cancel"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "domain"
        in: "path"
        description: "Domain to cancel"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "The domain does not exist"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Unknown domain error<br>At least two apex (aka @) `nameServers`\
            \ must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "v1"
      summary: "Update details for the specified Domain"
      operationId: "update"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "domain"
        in: "path"
        description: "Domain whose details are to be updated"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper for whom Domain is to be updated. NOTE: This is only\
          \ required if you are a Reseller managing a domain purchased outside the\
          \ scope of your reseller account. For instance, if you're a Reseller, but\
          \ purchased a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Changes to apply to existing Domain"
        required: true
        schema:
          $ref: "#/definitions/DomainUpdate"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Specified Subaccount not owned by authenticated Shopper"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "The given domain is not eligible to have its nameservers changed"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "At least two apex (aka @) `nameServers` must be specified<br>Failed\
            \ to update nameservers"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/contacts:
    patch:
      tags:
      - "v1"
      summary: "Update domain"
      operationId: "updateContacts"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper for whom domain contacts are to be updated. NOTE: This\
          \ is only required if you are a Reseller managing a domain purchased outside\
          \ the scope of your reseller account. For instance, if you're a Reseller,\
          \ but purchased a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose Contacts are to be updated."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "contacts"
        description: "Changes to apply to existing Contacts"
        required: true
        schema:
          $ref: "#/definitions/DomainContacts"
        x-exportParamName: "Contacts"
      responses:
        200:
          description: "No response was specified"
        204:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Domain not found<br>Identity document not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`domain` is not a valid Domain name"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/privacy:
    delete:
      tags:
      - "v1"
      summary: "Submit a privacy cancellation request for the given domain"
      operationId: "cancelPrivacy"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID of the owner of the domain"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose privacy is to be cancelled"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "The domain does not exist"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Customer has purchased Domain Ownership Protection and the\
            \ domain has expired<br>The domain status does not allow performing the\
            \ operation<br>Unknown domain error"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/privacy/purchase:
    post:
      tags:
      - "v1"
      summary: "Purchase privacy for a specified domain"
      operationId: "purchasePrivacy"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID of the owner of the domain"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain for which to purchase privacy"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "body"
        description: "Options for purchasing privacy"
        required: true
        schema:
          $ref: "#/definitions/PrivacyPurchase"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainPurchaseResponse"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "The domain status does not allow performing the operation"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "End-user must read and consent to all of the following legal\
            \ agreements<br>`domain` must match `sld.tld`"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/records:
    put:
      tags:
      - "v1"
      summary: "Replace all DNS Records for the specified Domain"
      operationId: "recordReplace"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID which owns the domain. NOTE: This is only required\
          \ if you are a Reseller managing a domain purchased outside the scope of\
          \ your reseller account. For instance, if you're a Reseller, but purchased\
          \ a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose DNS Records are to be replaced"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "records"
        description: "DNS Records to replace whatever currently exists"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/DNSRecord"
        x-exportParamName: "Records"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`domain` is not a valid Domain name<br>`record` does not fulfill\
            \ the schema"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
      - "v1"
      summary: "Add the specified DNS Records to the specified Domain"
      operationId: "recordAdd"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID which owns the domain. NOTE: This is only required\
          \ if you are a Reseller managing a domain purchased outside the scope of\
          \ your reseller account. For instance, if you're a Reseller, but purchased\
          \ a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose DNS Records are to be augmented"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "records"
        description: "DNS Records to add to whatever currently exists"
        required: true
        schema:
          $ref: "#/definitions/ArrayOfDNSRecord"
        x-exportParamName: "Records"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`domain` is not a valid Domain name"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/records/{type}/{name}:
    get:
      tags:
      - "v1"
      summary: "Retrieve DNS Records for the specified Domain, optionally with the\
        \ specified Type and/or Name"
      operationId: "recordGet"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID which owns the domain. NOTE: This is only required\
          \ if you are a Reseller managing a domain purchased outside the scope of\
          \ your reseller account. For instance, if you're a Reseller, but purchased\
          \ a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose DNS Records are to be retrieved"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "type"
        in: "path"
        description: "DNS Record Type for which DNS Records are to be retrieved"
        required: true
        type: "string"
        enum:
        - "A"
        - "AAAA"
        - "CNAME"
        - "MX"
        - "NS"
        - "SOA"
        - "SRV"
        - "TXT"
        x-exportParamName: "Type_"
      - name: "name"
        in: "path"
        description: "DNS Record Name for which DNS Records are to be retrieved"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "offset"
        in: "query"
        description: "Number of results to skip for pagination"
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Maximum number of items to return"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DNSRecord"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`record` does not fulfill the schema<br>`domain` is not a\
            \ valid Domain name"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "v1"
      summary: "Replace all DNS Records for the specified Domain with the specified\
        \ Type and Name"
      operationId: "recordReplaceTypeName"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID which owns the domain. NOTE: This is only required\
          \ if you are a Reseller managing a domain purchased outside the scope of\
          \ your reseller account. For instance, if you're a Reseller, but purchased\
          \ a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose DNS Records are to be replaced"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "type"
        in: "path"
        description: "DNS Record Type for which DNS Records are to be replaced"
        required: true
        type: "string"
        enum:
        - "A"
        - "AAAA"
        - "CNAME"
        - "MX"
        - "NS"
        - "SOA"
        - "SRV"
        - "TXT"
        x-exportParamName: "Type_"
      - name: "name"
        in: "path"
        description: "DNS Record Name for which DNS Records are to be replaced"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "records"
        description: "DNS Records to replace whatever currently exists"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/DNSRecordCreateTypeName"
        x-exportParamName: "Records"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`record` does not fulfill the schema"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/records/{type}:
    put:
      tags:
      - "v1"
      summary: "Replace all DNS Records for the specified Domain with the specified\
        \ Type"
      operationId: "recordReplaceType"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper ID which owns the domain. NOTE: This is only required\
          \ if you are a Reseller managing a domain purchased outside the scope of\
          \ your reseller account. For instance, if you're a Reseller, but purchased\
          \ a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose DNS Records are to be replaced"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "type"
        in: "path"
        description: "DNS Record Type for which DNS Records are to be replaced"
        required: true
        type: "string"
        enum:
        - "A"
        - "AAAA"
        - "CNAME"
        - "MX"
        - "NS"
        - "SOA"
        - "SRV"
        - "TXT"
        x-exportParamName: "Type_"
      - in: "body"
        name: "records"
        description: "DNS Records to replace whatever currently exists"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/DNSRecordCreateType"
        x-exportParamName: "Records"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`record` does not fulfill the schema"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/renew:
    post:
      tags:
      - "v1"
      summary: "Renew the specified Domain"
      operationId: "renew"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper for whom Domain is to be renewed. NOTE: This is only\
          \ required if you are a Reseller managing a domain purchased outside the\
          \ scope of your reseller account. For instance, if you're a Reseller, but\
          \ purchased a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain to renew"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "body"
        description: "Options for renewing existing Domain"
        required: false
        schema:
          $ref: "#/definitions/DomainRenew"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainPurchaseResponse"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "The domain status does not allow performing the operation"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "End-user must read and consent to all of the following legal\
            \ agreements<br>`domain` must match `sld.tld`"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/transfer:
    post:
      tags:
      - "v1"
      summary: "Purchase and start or restart transfer process"
      operationId: "transferIn"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "The Shopper to whom the domain should be transfered"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain to transfer in"
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "body"
        description: "Details for domain transfer purchase"
        required: true
        schema:
          $ref: "#/definitions/DomainTransferIn"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DomainPurchaseResponse"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "`domain` (domain) isn't available for transfer"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "Based on restrictions declared in JSON schema returned by\
            \ `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is missing\
            \ IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain\
            \ uses unsupported IDN script<br>End-user must read and consent to all\
            \ of the following legal agreements<br>FQDN fails generic validity regex<br>Invalid\
            \ character(s) error<br>Invalid period range<br>Invalid tld error<br>Non-IDN\
            \ domain name must not have dashes at the third and fourth position<br>Reserved\
            \ name error<br>`authCode` cannot be empty<br>`domain` must match `sld.tld`<br>domain\
            \ must be specified"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /v1/domains/{domain}/verifyRegistrantEmail:
    post:
      tags:
      - "v1"
      summary: "Re-send Contact E-mail Verification for specified Domain"
      operationId: "verifyEmail"
      consumes:
      - "application/json"
      - "application/xml"
      - "text/xml"
      produces:
      - "application/json"
      - "application/javascript"
      - "application/xml"
      - "text/javascript"
      - "text/xml"
      parameters:
      - name: "X-Shopper-Id"
        in: "header"
        description: "Shopper for whom domain contact e-mail should be verified. NOTE:\
          \ This is only required if you are a Reseller managing a domain purchased\
          \ outside the scope of your reseller account. For instance, if you're a\
          \ Reseller, but purchased a Domain via http://www.godaddy.com"
        required: false
        type: "string"
        x-exportParamName: "XShopperId"
        x-optionalDataType: "String"
      - name: "domain"
        in: "path"
        description: "Domain whose Contact E-mail should be verified."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      responses:
        200:
          description: "Request was successful"
        400:
          description: "Request was malformed"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Authentication info not sent or invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Authenticated user is not allowed access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        422:
          description: "`domain` is not a valid Domain name"
          schema:
            $ref: "#/definitions/Error"
        429:
          description: "Too many requests received within interval"
          schema:
            $ref: "#/definitions/ErrorLimit"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
        504:
          description: "Gateway timeout"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Address:
    required:
    - "address1"
    - "city"
    - "country"
    - "postalCode"
    - "state"
    properties:
      address1:
        type: "string"
        format: "street-address"
      address2:
        type: "string"
        format: "street-address2"
      city:
        type: "string"
        format: "city-name"
      country:
        type: "string"
        format: "iso-country-code"
        description: "Two-letter ISO country code to be used as a hint for target\
          \ region<br/><br/>\nNOTE: These are sample values, there are many\n<a href='http://www.iso.org/iso/country_codes.htm'>more</a>"
        enum:
        - "AC"
        - "AD"
        - "AE"
        - "AF"
        - "AG"
        - "AI"
        - "AL"
        - "AM"
        - "AO"
        - "AQ"
        - "AR"
        - "AS"
        - "AT"
        - "AU"
        - "AW"
        - "AX"
        - "AZ"
        - "BA"
        - "BB"
        - "BD"
        - "BE"
        - "BF"
        - "BG"
        - "BH"
        - "BI"
        - "BJ"
        - "BM"
        - "BN"
        - "BO"
        - "BQ"
        - "BR"
        - "BS"
        - "BT"
        - "BV"
        - "BW"
        - "BY"
        - "BZ"
        - "CA"
        - "CC"
        - "CD"
        - "CF"
        - "CG"
        - "CH"
        - "CI"
        - "CK"
        - "CL"
        - "CM"
        - "CN"
        - "CO"
        - "CR"
        - "CV"
        - "CW"
        - "CX"
        - "CY"
        - "CZ"
        - "DE"
        - "DJ"
        - "DK"
        - "DM"
        - "DO"
        - "DZ"
        - "EC"
        - "EE"
        - "EG"
        - "EH"
        - "ER"
        - "ES"
        - "ET"
        - "FI"
        - "FJ"
        - "FK"
        - "FM"
        - "FO"
        - "FR"
        - "GA"
        - "GB"
        - "GD"
        - "GE"
        - "GF"
        - "GG"
        - "GH"
        - "GI"
        - "GL"
        - "GM"
        - "GN"
        - "GP"
        - "GQ"
        - "GR"
        - "GS"
        - "GT"
        - "GU"
        - "GW"
        - "GY"
        - "HK"
        - "HM"
        - "HN"
        - "HR"
        - "HT"
        - "HU"
        - "ID"
        - "IE"
        - "IL"
        - "IM"
        - "IN"
        - "IO"
        - "IQ"
        - "IS"
        - "IT"
        - "JE"
        - "JM"
        - "JO"
        - "JP"
        - "KE"
        - "KG"
        - "KH"
        - "KI"
        - "KM"
        - "KN"
        - "KR"
        - "KV"
        - "KW"
        - "KY"
        - "KZ"
        - "LA"
        - "LB"
        - "LC"
        - "LI"
        - "LK"
        - "LR"
        - "LS"
        - "LT"
        - "LU"
        - "LV"
        - "LY"
        - "MA"
        - "MC"
        - "MD"
        - "ME"
        - "MG"
        - "MH"
        - "MK"
        - "ML"
        - "MM"
        - "MN"
        - "MO"
        - "MP"
        - "MQ"
        - "MR"
        - "MS"
        - "MT"
        - "MU"
        - "MV"
        - "MW"
        - "MX"
        - "MY"
        - "MZ"
        - "NA"
        - "NC"
        - "NE"
        - "NF"
        - "NG"
        - "NI"
        - "NL"
        - "NO"
        - "NP"
        - "NR"
        - "NU"
        - "NZ"
        - "OM"
        - "PA"
        - "PE"
        - "PF"
        - "PG"
        - "PH"
        - "PK"
        - "PL"
        - "PM"
        - "PN"
        - "PR"
        - "PS"
        - "PT"
        - "PW"
        - "PY"
        - "QA"
        - "RE"
        - "RO"
        - "RS"
        - "RU"
        - "RW"
        - "SA"
        - "SB"
        - "SC"
        - "SE"
        - "SG"
        - "SH"
        - "SI"
        - "SJ"
        - "SK"
        - "SL"
        - "SM"
        - "SN"
        - "SO"
        - "SR"
        - "ST"
        - "SV"
        - "SX"
        - "SZ"
        - "TC"
        - "TD"
        - "TF"
        - "TG"
        - "TH"
        - "TJ"
        - "TK"
        - "TL"
        - "TM"
        - "TN"
        - "TO"
        - "TP"
        - "TR"
        - "TT"
        - "TV"
        - "TW"
        - "TZ"
        - "UA"
        - "UG"
        - "UM"
        - "US"
        - "UY"
        - "UZ"
        - "VA"
        - "VC"
        - "VE"
        - "VG"
        - "VI"
        - "VN"
        - "VU"
        - "WF"
        - "WS"
        - "YE"
        - "YT"
        - "ZA"
        - "ZM"
        - "ZW"
        default: "US"
      postalCode:
        type: "string"
        format: "postal-code"
        description: "Postal or zip code"
      state:
        type: "string"
        format: "state-province-territory"
        description: "State or province or territory"
    example:
      postalCode: "postalCode"
      state: "state"
      address1: "address1"
      address2: "address2"
      country: "US"
      city: "city"
  ArrayOfDNSRecord:
    type: "array"
    items:
      $ref: "#/definitions/DNSRecord"
  Consent:
    required:
    - "agreedAt"
    - "agreedBy"
    - "agreementKeys"
    properties:
      agreedAt:
        type: "string"
        format: "iso-datetime"
        description: "Timestamp indicating when the end-user consented to these legal\
          \ agreements"
      agreedBy:
        type: "string"
        description: "Originating client IP address of the end-user's computer when\
          \ they consented to these legal agreements"
      agreementKeys:
        type: "array"
        description: "Unique identifiers of the legal agreements to which the end-user\
          \ has agreed, as returned from the/domains/agreements endpoint"
        items:
          type: "string"
    example:
      agreedAt: "agreedAt"
      agreementKeys:
      - "agreementKeys"
      - "agreementKeys"
      agreedBy: "agreedBy"
  Contact:
    required:
    - "addressMailing"
    - "email"
    - "nameFirst"
    - "nameLast"
    - "phone"
    properties:
      addressMailing:
        $ref: "#/definitions/Address"
      email:
        type: "string"
        format: "email"
      fax:
        type: "string"
        format: "phone"
      jobTitle:
        type: "string"
      nameFirst:
        type: "string"
        format: "person-name"
      nameLast:
        type: "string"
        format: "person-name"
      nameMiddle:
        type: "string"
      organization:
        type: "string"
        format: "organization-name"
      phone:
        type: "string"
        format: "phone"
    example:
      phone: "phone"
      organization: "organization"
      nameLast: "nameLast"
      nameMiddle: "nameMiddle"
      nameFirst: "nameFirst"
      fax: "fax"
      email: "email"
      jobTitle: "jobTitle"
      addressMailing:
        postalCode: "postalCode"
        state: "state"
        address1: "address1"
        address2: "address2"
        country: "US"
        city: "city"
  DNSRecord:
    required:
    - "data"
    - "name"
    - "type"
    properties:
      data:
        type: "string"
      name:
        type: "string"
        format: "domain"
      port:
        type: "integer"
        description: "Service port (SRV only)"
        minimum: 1
        maximum: 65535
      priority:
        type: "integer"
        format: "integer-positive"
        description: "Record priority (MX and SRV only)"
      protocol:
        type: "string"
        description: "Service protocol (SRV only)"
      service:
        type: "string"
        description: "Service type (SRV only)"
      ttl:
        type: "integer"
        format: "integer-positive"
      type:
        type: "string"
        enum:
        - "A"
        - "AAAA"
        - "CNAME"
        - "MX"
        - "NS"
        - "SOA"
        - "SRV"
        - "TXT"
      weight:
        type: "integer"
        format: "integer-positive"
        description: "Record weight (SRV only)"
    example:
      port: 5249
      protocol: "protocol"
      weight: 5
      priority: 6
      name: "name"
      service: "service"
      data: "data"
      type: "A"
      ttl: 1
  DNSRecordCreateType:
    required:
    - "data"
    - "name"
    properties:
      data:
        type: "string"
      name:
        type: "string"
        format: "domain"
      port:
        type: "integer"
        description: "Service port (SRV only)"
        minimum: 1
        maximum: 65535
      priority:
        type: "integer"
        format: "integer-positive"
        description: "Record priority (MX and SRV only)"
      protocol:
        type: "string"
        description: "Service protocol (SRV only)"
      service:
        type: "string"
        description: "Service type (SRV only)"
      ttl:
        type: "integer"
        format: "integer-positive"
      weight:
        type: "integer"
        format: "integer-positive"
        description: "Record weight (SRV only)"
  DNSRecordCreateTypeName:
    required:
    - "data"
    properties:
      data:
        type: "string"
      port:
        type: "integer"
        description: "Service port (SRV only)"
        minimum: 1
        maximum: 65535
      priority:
        type: "integer"
        format: "integer-positive"
        description: "Record priority (MX and SRV only)"
      protocol:
        type: "string"
        description: "Service protocol (SRV only)"
      service:
        type: "string"
        description: "Service type (SRV only)"
      ttl:
        type: "integer"
        format: "integer-positive"
      weight:
        type: "integer"
        format: "integer-positive"
        description: "Record weight (SRV only)"
  DomainAvailableBulk:
    required:
    - "domains"
    properties:
      domains:
        type: "array"
        description: "Domain available response array"
        items:
          $ref: "#/definitions/DomainAvailableResponse"
    example:
      domains:
      - price: 6
        definitive: true
        domain: "domain"
        available: true
        period: 0
        currency: "USD"
      - price: 6
        definitive: true
        domain: "domain"
        available: true
        period: 0
        currency: "USD"
  DomainAvailableBulkMixed:
    required:
    - "domains"
    properties:
      domains:
        type: "array"
        description: "Domain available response array"
        items:
          $ref: "#/definitions/DomainAvailableResponse"
      errors:
        type: "array"
        description: "Errors encountered while performing a domain available check"
        items:
          $ref: "#/definitions/DomainAvailableError"
  DomainAvailableError:
    required:
    - "code"
    - "domain"
    - "path"
    - "status"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      domain:
        type: "string"
        description: "Domain name"
      message:
        type: "string"
        description: "Human-readable, English description of the error"
      path:
        type: "string"
        format: "json-path"
        description: "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a\
          \ field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n\
          <li style='margin-left: 12px;'>JSONPath referring to a field that refers\
          \ to an object containing an error, with more detail in `pathRelated`</li>\n\
          </ul>"
      status:
        type: "integer"
        description: "HTTP status code that would return for a single check"
  DomainAvailableResponse:
    required:
    - "available"
    - "definitive"
    - "domain"
    properties:
      available:
        type: "boolean"
        description: "Whether or not the domain name is available"
      currency:
        type: "string"
        format: "iso-currency-code"
        description: "Currency in which the `price` is listed. Only returned if tld\
          \ is offered"
        default: "USD"
      definitive:
        type: "boolean"
        description: "Whether or not the `available` answer has been definitively\
          \ verified with the registry"
      domain:
        type: "string"
        description: "Domain name"
      period:
        type: "integer"
        format: "integer-positive"
        description: "Number of years included in the price. Only returned if tld\
          \ is offered"
      price:
        type: "integer"
        format: "currency-micro-unit"
        description: "Price of the domain excluding taxes or fees. Only returned if\
          \ tld is offered"
    example:
      price: 6
      definitive: true
      domain: "domain"
      available: true
      period: 0
      currency: "USD"
  DomainContacts:
    required:
    - "contactRegistrant"
    properties:
      contactAdmin:
        $ref: "#/definitions/Contact"
      contactBilling:
        $ref: "#/definitions/Contact"
      contactRegistrant:
        $ref: "#/definitions/Contact"
      contactTech:
        $ref: "#/definitions/Contact"
    example:
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
  DomainDetail:
    required:
    - "authCode"
    - "contactAdmin"
    - "contactBilling"
    - "contactRegistrant"
    - "contactTech"
    - "createdAt"
    - "domain"
    - "domainId"
    - "expirationProtected"
    - "holdRegistrar"
    - "locked"
    - "nameServers"
    - "privacy"
    - "renewAuto"
    - "renewDeadline"
    - "status"
    - "transferProtected"
    properties:
      authCode:
        type: "string"
        description: "Authorization code for transferring the Domain"
      contactAdmin:
        description: "Administrative contact for the domain registration"
        $ref: "#/definitions/Contact"
      contactBilling:
        description: "Billing contact for the domain registration"
        $ref: "#/definitions/Contact"
      contactRegistrant:
        description: "Registration contact for the domain"
        $ref: "#/definitions/Contact"
      contactTech:
        description: "Technical contact for the domain registration"
        $ref: "#/definitions/Contact"
      createdAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain was created"
      deletedAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain was deleted"
      transferAwayEligibleAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain is eligible to transfer"
      domain:
        type: "string"
        description: "Name of the domain"
      domainId:
        type: "number"
        format: "double"
        description: "Unique identifier for this Domain"
      expirationProtected:
        type: "boolean"
        description: "Whether or not the domain is protected from expiration"
      expires:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain will expire"
      holdRegistrar:
        type: "boolean"
        description: "Whether or not the domain is on-hold by the registrar"
      locked:
        type: "boolean"
        description: "Whether or not the domain is locked to prevent transfers"
      nameServers:
        type: "array"
        description: "Fully-qualified domain names for DNS servers"
        items:
          type: "string"
          format: "host-name"
      privacy:
        type: "boolean"
        description: "Whether or not the domain has privacy protection"
      renewAuto:
        type: "boolean"
        description: "Whether or not the domain is configured to automatically renew"
      renewDeadline:
        type: "string"
        format: "date-time"
        description: "Date the domain must renew on"
      status:
        type: "string"
        description: "Processing status of the domain<br/><ul>\n<li><strong style='margin-left:\
          \ 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left:\
          \ 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete\
          \ an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong>\
          \ - Domain has been cancelled, and may or may not be reclaimable</li>\n\
          <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has\
          \ been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong\
          \ style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n\
          <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been\
          \ excluded from Firehose registration</li>\n<li><strong style='margin-left:\
          \ 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left:\
          \ 12px;'>FAILED*</strong> - Domain has failed a required action, and the\
          \ system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong>\
          \ - Domain has been placed on hold, and likely requires intervention from\
          \ Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong>\
          \ - Domain has been locked, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been\
          \ parked, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way\
          \ through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong>\
          \ - Domain is reserved, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been\
          \ reverted, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended,\
          \ and likely requires intervention from Support</li>\n<li><strong style='margin-left:\
          \ 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n\
          <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an\
          \ unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong>\
          \ - Domain has been unlocked, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been\
          \ unparked, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been\
          \ transferred to another account</li>\n</ul>"
      subaccountId:
        type: "string"
        description: "Reseller subaccount shopperid who can manage the domain"
      transferProtected:
        type: "boolean"
        description: "Whether or not the domain is protected from transfer"
      verifications:
        description: "Progress and status for each of the verification processes requested\
          \ for this domain"
        $ref: "#/definitions/VerificationsDomain"
    example:
      authCode: "authCode"
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      subaccountId: "subaccountId"
      status: "status"
      transferAwayEligibleAt: "2000-01-23T04:56:07.000+00:00"
      privacy: true
      expirationProtected: true
      nameServers:
      - "nameServers"
      - "nameServers"
      transferProtected: true
      expires: "2000-01-23T04:56:07.000+00:00"
      renewDeadline: "2000-01-23T04:56:07.000+00:00"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      verifications:
        realName:
          status: "APPROVED"
        domainName:
          status: "APPROVED"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      domainId: 0.8008281904610115
      holdRegistrar: true
      deletedAt: "2000-01-23T04:56:07.000+00:00"
      domain: "domain"
      locked: true
      renewAuto: true
  DomainPurchase:
    required:
    - "consent"
    - "domain"
    properties:
      consent:
        $ref: "#/definitions/Consent"
      contactAdmin:
        $ref: "#/definitions/Contact"
      contactBilling:
        $ref: "#/definitions/Contact"
      contactRegistrant:
        $ref: "#/definitions/Contact"
      contactTech:
        $ref: "#/definitions/Contact"
      domain:
        type: "string"
        format: "domain"
        description: "For internationalized domain names with non-ascii characters,\
          \ the domain name is converted to punycode before format and pattern validation\
          \ rules are checked"
      nameServers:
        type: "array"
        items:
          type: "string"
          format: "host-name"
      period:
        type: "integer"
        format: "integer-positive"
        minimum: 1
        maximum: 10
      privacy:
        type: "boolean"
        default: false
      renewAuto:
        type: "boolean"
        default: true
    example:
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      consent:
        agreedAt: "agreedAt"
        agreementKeys:
        - "agreementKeys"
        - "agreementKeys"
        agreedBy: "agreedBy"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      privacy: false
      domain: "domain"
      period: 1
      nameServers:
      - "nameServers"
      - "nameServers"
      renewAuto: true
  DomainPurchaseResponse:
    required:
    - "itemCount"
    - "orderId"
    - "total"
    properties:
      currency:
        type: "string"
        format: "iso-currency-code"
        description: "Currency in which the `total` is listed"
        default: "USD"
      itemCount:
        type: "integer"
        format: "integer-positive"
        description: "Number items included in the order"
      orderId:
        type: "integer"
        format: "integer-positive"
        description: "Unique identifier of the order processed to purchase the domain"
      total:
        type: "integer"
        format: "currency-micro-unit"
        description: "Total cost of the domain and any selected add-ons"
    example:
      total: 1
      itemCount: 0
      orderId: 6
      currency: "USD"
  DomainRenew:
    properties:
      period:
        type: "integer"
        format: "integer-positive"
        description: "Number of years to extend the Domain. Must not exceed maximum\
          \ for TLD. When omitted, defaults to `period` specified during original\
          \ purchase"
        minimum: 1
        maximum: 10
    example:
      period: 1
  DomainSuggestion:
    required:
    - "domain"
    properties:
      domain:
        type: "string"
        description: "Suggested domain name"
    example:
      domain: "domain"
  DomainSummary:
    required:
    - "contactRegistrant"
    - "createdAt"
    - "domain"
    - "domainId"
    - "expirationProtected"
    - "holdRegistrar"
    - "locked"
    - "privacy"
    - "renewAuto"
    - "renewDeadline"
    - "status"
    - "transferProtected"
    properties:
      authCode:
        type: "string"
        description: "Authorization code for transferring the Domain"
      contactAdmin:
        description: "Administrative contact for the domain registration"
        $ref: "#/definitions/Contact"
      contactBilling:
        description: "Billing contact for the domain registration"
        $ref: "#/definitions/Contact"
      contactRegistrant:
        description: "Registration contact for the domain"
        $ref: "#/definitions/Contact"
      contactTech:
        description: "Technical contact for the domain registration"
        $ref: "#/definitions/Contact"
      createdAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain was created"
      deletedAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain was deleted"
      transferAwayEligibleAt:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain is eligible to transfer"
      domain:
        type: "string"
        description: "Name of the domain"
      domainId:
        type: "number"
        format: "double"
        description: "Unique identifier for this Domain"
      expirationProtected:
        type: "boolean"
        description: "Whether or not the domain is protected from expiration"
      expires:
        type: "string"
        format: "date-time"
        description: "Date and time when this domain will expire"
      holdRegistrar:
        type: "boolean"
        description: "Whether or not the domain is on-hold by the registrar"
      locked:
        type: "boolean"
        description: "Whether or not the domain is locked to prevent transfers"
      nameServers:
        type: "array"
        description: "Fully-qualified domain names for DNS servers"
        items:
          type: "string"
          format: "host-name"
      privacy:
        type: "boolean"
        description: "Whether or not the domain has privacy protection"
      renewAuto:
        type: "boolean"
        description: "Whether or not the domain is configured to automatically renew"
      renewDeadline:
        type: "string"
        format: "date-time"
        description: "Date the domain must renew on"
      renewable:
        type: "boolean"
        description: "Whether or not the domain is eligble for renewal based on status"
      status:
        type: "string"
        description: "Processing status of the domain<br/><ul>\n<li><strong style='margin-left:\
          \ 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left:\
          \ 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete\
          \ an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong>\
          \ - Domain has been cancelled, and may or may not be reclaimable</li>\n\
          <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has\
          \ been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong\
          \ style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n\
          <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been\
          \ excluded from Firehose registration</li>\n<li><strong style='margin-left:\
          \ 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left:\
          \ 12px;'>FAILED*</strong> - Domain has failed a required action, and the\
          \ system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong>\
          \ - Domain has been placed on hold, and likely requires intervention from\
          \ Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong>\
          \ - Domain has been locked, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been\
          \ parked, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way\
          \ through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong>\
          \ - Domain is reserved, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been\
          \ reverted, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended,\
          \ and likely requires intervention from Support</li>\n<li><strong style='margin-left:\
          \ 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n\
          <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an\
          \ unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong>\
          \ - Domain has been unlocked, and likely requires intervention from Support</li>\n\
          <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been\
          \ unparked, and likely requires intervention from Support</li>\n<li><strong\
          \ style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been\
          \ transferred to another account</li>\n</ul>"
      transferProtected:
        type: "boolean"
        description: "Whether or not the domain is protected from transfer"
    example:
      authCode: "authCode"
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      status: "status"
      transferAwayEligibleAt: "2000-01-23T04:56:07.000+00:00"
      privacy: true
      renewable: true
      expirationProtected: true
      nameServers:
      - "nameServers"
      - "nameServers"
      transferProtected: true
      expires: "2000-01-23T04:56:07.000+00:00"
      renewDeadline: "2000-01-23T04:56:07.000+00:00"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      domainId: 0.8008281904610115
      holdRegistrar: true
      deletedAt: "2000-01-23T04:56:07.000+00:00"
      domain: "domain"
      locked: true
      renewAuto: true
  DomainTransferIn:
    required:
    - "authCode"
    - "consent"
    properties:
      authCode:
        type: "string"
        description: "Authorization code from registrar for transferring a domain"
      consent:
        description: "Required agreements can be retrieved via the GET ./domains/agreements\
          \ endpoint"
        $ref: "#/definitions/Consent"
      period:
        type: "integer"
        format: "integer-positive"
        description: "Can be more than 1 but no more than 10 years total including\
          \ current registration length"
        minimum: 1
        maximum: 10
      privacy:
        type: "boolean"
        description: "Whether or not privacy has been requested"
        default: false
      renewAuto:
        type: "boolean"
        description: "Whether or not the domain should be configured to automatically\
          \ renew"
        default: true
      contactAdmin:
        description: "The contact to use for the domain admin contact. Depending on\
          \ the tld of the domain being transferred, this field may be required."
        $ref: "#/definitions/Contact"
      contactBilling:
        description: "The contact to use for the domain billing contact. Depending\
          \ on the tld of the domain being transferred, this field may be required."
        $ref: "#/definitions/Contact"
      contactRegistrant:
        description: "The contact to use for the domain registrant contact. Depending\
          \ on the tld of the domain being transferred, this field may be required."
        $ref: "#/definitions/Contact"
      contactTech:
        description: "The contact to use for the domain tech contact. Depending on\
          \ the tld of the domain being transferred, this field may be required."
        $ref: "#/definitions/Contact"
    example:
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      authCode: "authCode"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      consent:
        agreedAt: "agreedAt"
        agreementKeys:
        - "agreementKeys"
        - "agreementKeys"
        agreedBy: "agreedBy"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      privacy: false
      period: 1
      renewAuto: true
  DomainUpdate:
    properties:
      locked:
        type: "boolean"
        description: "Whether or not the domain should be locked to prevent transfers"
      nameServers:
        type: "array"
        description: "Fully-qualified domain names for Name Servers to associate with\
          \ the domain"
        items:
          format: "host-name"
      renewAuto:
        type: "boolean"
        description: "Whether or not the domain should be configured to automatically\
          \ renew"
      subaccountId:
        type: "string"
        description: "Reseller subaccount shopperid who can manage the domain"
    example:
      subaccountId: "subaccountId"
      locked: true
      nameServers:
      - ""
      - ""
      renewAuto: true
  DomainsContactsBulk:
    required:
    - "domains"
    properties:
      contactAdmin:
        $ref: "#/definitions/Contact"
      contactBilling:
        $ref: "#/definitions/Contact"
      contactPresence:
        $ref: "#/definitions/Contact"
      contactRegistrant:
        $ref: "#/definitions/Contact"
      contactTech:
        $ref: "#/definitions/Contact"
      domains:
        type: "array"
        description: "An array of domain names to be validated against. Alternatively,\
          \ you can specify the extracted tlds. However, full domain names are required\
          \ if the tld is `uk`"
        items:
          type: "string"
          format: "domain"
      entityType:
        type: "string"
        description: "Canadian Presence Requirement (CA)"
        enum:
        - "ABORIGINAL"
        - "ASSOCIATION"
        - "CITIZEN"
        - "CORPORATION"
        - "EDUCATIONAL"
        - "GOVERNMENT"
        - "HOSPITAL"
        - "INDIAN_BAND"
        - "LEGAL_REPRESENTATIVE"
        - "LIBRARY_ARCHIVE_MUSEUM"
        - "MARK_REGISTERED"
        - "MARK_TRADE"
        - "PARTNERSHIP"
        - "POLITICAL_PARTY"
        - "RESIDENT_PERMANENT"
        - "TRUST"
        - "UNION"
    example:
      contactPresence:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactBilling:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactRegistrant:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      contactTech:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      domains:
      - "domains"
      - "domains"
      contactAdmin:
        phone: "phone"
        organization: "organization"
        nameLast: "nameLast"
        nameMiddle: "nameMiddle"
        nameFirst: "nameFirst"
        fax: "fax"
        email: "email"
        jobTitle: "jobTitle"
        addressMailing:
          postalCode: "postalCode"
          state: "state"
          address1: "address1"
          address2: "address2"
          country: "US"
          city: "city"
      entityType: "ABORIGINAL"
  Error:
    required:
    - "code"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      fields:
        type: "array"
        description: "List of the specific fields, and the errors found with their\
          \ contents"
        items:
          $ref: "#/definitions/ErrorField"
      message:
        type: "string"
        description: "Human-readable, English description of the error"
  ErrorDomainContactsValidate:
    required:
    - "code"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      fields:
        type: "array"
        description: "List of the specific fields, and the errors found with their\
          \ contents"
        items:
          $ref: "#/definitions/ErrorFieldDomainContactsValidate"
      message:
        type: "string"
        description: "Human-readable, English description of the error"
      stack:
        type: "array"
        description: "Stack trace indicating where the error occurred.<br/>NOTE: This\
          \ attribute <strong>MAY</strong> be included for Development and Test environments.\
          \ However, it <strong>MUST NOT</strong> be exposed from OTE nor Production\
          \ systems"
        items:
          type: "string"
  ErrorField:
    required:
    - "code"
    - "path"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      message:
        type: "string"
        description: "Human-readable, English description of the problem with the\
          \ contents of the field"
      path:
        type: "string"
        format: "json-path"
        description: "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a\
          \ field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n\
          <li style='margin-left: 12px;'>JSONPath referring to a field that refers\
          \ to an object containing an error, with more detail in `pathRelated`</li>\n\
          </ul>"
      pathRelated:
        type: "string"
        format: "json-path"
        description: "JSONPath referring to a field containing an error, which is\
          \ referenced by `path`"
  ErrorFieldDomainContactsValidate:
    required:
    - "code"
    - "domains"
    - "path"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      domains:
        type: "array"
        description: "An array of domain names the error is for. If tlds are specified\
          \ in the request, `domains` will contain tlds. For example, if `domains`\
          \ in request is [\"test1.com\", \"test2.uk\", \"net\"], and the field is\
          \ invalid for com and net, then one of the `fields` in response will have\
          \ [\"test1.com\", \"net\"] as `domains`"
        items:
          type: "string"
      message:
        type: "string"
        description: "Human-readable, English description of the problem with the\
          \ contents of the field"
      path:
        type: "string"
        format: "json-path"
        description: "1) JSONPath referring to the field within the data containing\
          \ an error<br/>or<br/>2) JSONPath referring to an object containing an error"
      pathRelated:
        type: "string"
        format: "json-path"
        description: "JSONPath referring to the field on the object referenced by\
          \ `path` containing an error"
  ErrorLimit:
    required:
    - "code"
    - "retryAfterSec"
    properties:
      code:
        type: "string"
        format: "constant"
        description: "Short identifier for the error, suitable for indicating the\
          \ specific error within client code"
      fields:
        type: "array"
        description: "List of the specific fields, and the errors found with their\
          \ contents"
        items:
          $ref: "#/definitions/ErrorField"
      message:
        type: "string"
        description: "Human-readable, English description of the error"
      retryAfterSec:
        type: "integer"
        format: "integer-positive"
        description: "Number of seconds to wait before attempting a similar request"
  JsonDataType:
    required:
    - "type"
    properties:
      format:
        type: "string"
      pattern:
        type: "string"
      type:
        type: "string"
  JsonProperty:
    required:
    - "required"
    - "type"
    properties:
      defaultValue:
        type: "string"
      format:
        type: "string"
      items:
        type: "object"
        properties: {}
      maxItems:
        type: "integer"
      maximum:
        type: "integer"
      minItems:
        type: "integer"
      minimum:
        type: "integer"
      pattern:
        type: "string"
      required:
        type: "boolean"
      type:
        type: "string"
  JsonSchema:
    required:
    - "id"
    - "models"
    - "properties"
    - "required"
    properties:
      id:
        type: "string"
      models:
        type: "object"
        properties: {}
      properties:
        type: "object"
        properties: {}
      required:
        type: "array"
        items:
          type: "string"
    example:
      models: "{}"
      id: "id"
      properties: "{}"
      required:
      - "required"
      - "required"
  LegalAgreement:
    required:
    - "agreementKey"
    - "content"
    - "title"
    properties:
      agreementKey:
        type: "string"
        description: "Unique identifier for the legal agreement"
      content:
        type: "string"
        description: "Contents of the legal agreement, suitable for embedding"
      title:
        type: "string"
        description: "Title of the legal agreement"
      url:
        type: "string"
        format: "url"
        description: "URL to a page containing the legal agreement"
    example:
      content: "content"
      title: "title"
      agreementKey: "agreementKey"
      url: "http://example.com/aeiou"
  PrivacyPurchase:
    required:
    - "consent"
    properties:
      consent:
        description: "Specify agreement `DNPA`.  Required agreements can be retrieved\
          \ via the GET ./domains/agreements endpoint"
        $ref: "#/definitions/Consent"
    example:
      consent:
        agreedAt: "agreedAt"
        agreementKeys:
        - "agreementKeys"
        - "agreementKeys"
        agreedBy: "agreedBy"
  RealNameValidation:
    properties:
      status:
        type: "string"
        enum:
        - "APPROVED"
        - "PENDING"
        - "PENDING_ASSOCIATION_WITH_DOMAIN"
        - "PENDING_SUBMISSION_TO_VERIFICATION_SERVICE"
        - "PENDING_VERIFICATION_SERVICE_REPLY"
        - "PENDING_SUBMISSION_TO_REGISTRY"
        - "PENDING_REGISTRY_REPLY"
        - "PENDING_DOMAIN_UPDATE"
        - "REJECTED"
  TldSummary:
    required:
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        format: "tld"
        description: "Name of the top-level domain"
      type:
        type: "string"
        description: "Type of the top-level domain"
        enum:
        - "COUNTRY_CODE"
        - "GENERIC"
        default: "GENERIC"
    example:
      name: "name"
      type: "GENERIC"
  VerificationDomainName:
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "Status of the domain name verification"
        enum:
        - "APPROVED"
        - "PENDING"
        - "REJECTED"
        - "UNABLE_TO_RETRIEVE_STATUS"
    example:
      status: "APPROVED"
  VerificationRealName:
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "Status of the real name verification<br/><ul> <li><strong style='margin-left:\
          \ 12px;'>APPROVED</strong> - All is well</li> <li><strong style='margin-left:\
          \ 12px;'>PENDING</strong> - Real name verification is working its way through\
          \ the workflow</li> <li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong>\
          \ - Local government verification shows there is a newer version of your\
          \ document.  Upload the latest version of the document and retry real name\
          \ verification</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong>\
          \ - Business license is expired</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong>\
          \ - Organization code certificate number has expired</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear\
          \ name on your uploaded document, please upload a different document to\
          \ retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong>\
          \ - Registrant identification is not clear.  Upload a better image to retry</li>\
          \ <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong>\
          \ - Registrant identification is incomplete</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration\
          \ letter is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong>\
          \ - Provided identity card is inconsistent with the identity card on record</li>\
          \ <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong>\
          \ - Provided organization information is inconsistent with the results obtained\
          \ using the submitted organization code</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant\
          \ identification does not match the name in the system</li> <li><strong\
          \ style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong>\
          \ - Your document contains an invalid business license or organization code\
          \ certificate number</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong>\
          \ - Document is invalid.  Please upload another document to retry real name\
          \ verification</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong>\
          \ - Business id does not match the business id in the document</li> <li><strong\
          \ style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> -\
          \ Business name does not match the business name in the document</li> <li><strong\
          \ style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document\
          \ id does not match the id in the document</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not\
          \ match the name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong>\
          \ - Document type does not match the document</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided\
          \ for the registrant does not match the document</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region\
          \ is overseas, but a local identity document was provided</li> <li><strong\
          \ style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong>\
          \ - Registrant name has been changed, so the request must be resubmitted</li>\
          \ <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong>\
          \ - Registrant identification could not be opened.  Please upload the document\
          \ again to retry real name verification</li> <li><strong style='margin-left:\
          \ 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.\
          \  Please upload the document again to retry real name verification</li>\
          \ <li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong>\
          \ - Document was rejected due to an unknown error. For more information,\
          \ contact customer support</li> <li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong>\
          \ - Unable to retrieve status for the real name verification process.  Retry,\
          \ if this status persists, contact customer support</li> </ul>"
        enum:
        - "APPROVED"
        - "PENDING"
        - "REJECTED_DOCUMENT_OUTDATED"
        - "REJECTED_EXPIRED_BUSINESS_LICENSE"
        - "REJECTED_EXPIRED_ORGANIZATION_CODE"
        - "REJECTED_ILLEGIBLE_DOCUMENT_NAME"
        - "REJECTED_ILLEGIBLE_IDENTIFICATION"
        - "REJECTED_INCOMPLETE_IDENTIFICATION"
        - "REJECTED_INCOMPLETE_REGISTRATION_LETTER"
        - "REJECTED_INCONSISTENT_IDENTITY_CARD"
        - "REJECTED_INCONSISTENT_ORGANIZATION_CODE"
        - "REJECTED_INCONSISTENT_REGISTRANT_NAME"
        - "REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE"
        - "REJECTED_INVALID_DOCUMENT"
        - "REJECTED_MISMATCH_BUSINESS_ID"
        - "REJECTED_MISMATCH_BUSINESS_NAME"
        - "REJECTED_MISMATCH_DOCUMENT_ID"
        - "REJECTED_MISMATCH_DOCUMENT_NAME"
        - "REJECTED_MISMATCH_DOCUMENT_TYPE"
        - "REJECTED_MISMATCH_REGISTRANT_INFO"
        - "REJECTED_MISMATCH_REGISTRANT_LOCALITY"
        - "REJECTED_MISMATCH_REGISTRANT_NAME"
        - "REJECTED_UNABLE_TO_OPEN"
        - "REJECTED_UNABLE_TO_VERIFY"
        - "REJECTED_UNKNOWN_ERROR"
        - "UNABLE_TO_RETRIEVE_STATUS"
    example:
      status: "APPROVED"
  VerificationsDomain:
    properties:
      domainName:
        description: "Verification of domain name against a prohibited list maintained\
          \ by the government"
        $ref: "#/definitions/VerificationDomainName"
      realName:
        description: "Verification of identity by comparing registration data against\
          \ government issued documents"
        $ref: "#/definitions/VerificationRealName"
    example:
      realName:
        status: "APPROVED"
      domainName:
        status: "APPROVED"
  domain:
    properties:
      id:
        type: "number"
        format: "double"
